openapi: 3.0.0
info:
  title: User and Chat Room API
  version: 1.0.0
  description: API for user registration, authentication, and chat room management.

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Role:
      type: string
      enum:
        - admin
        - user
    UserToken:
      type: object
      properties:
        userId:
          type: string
        role:
          $ref: '#/components/schemas/Role'

    RegisterRequest:
      type: object
      required:
        - name
        - password
      properties:
        name:
          type: string
        password:
          type: string
    LoginRequest:
      type: object
      required:
        - name
        - password
      properties:
        name: 
          type: string
        password:
          type: string

    UserResponse:
      type: object
      required:
        - id
        - name 
        - created
        - profilePic
      properties:
        id:
          type: integer
        name:
          type: string
        created:
          type: string
          format: date
        profilePic:
          type: string
          format: binary
          description: base 64 encoded png image

    UserRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        profilePic:
          type: string
          format: binary

    RoomResponse:
      type: object
      required:
        - id
        - memberCount
        - name
        - isPrivate
      properties:
        id:
          type: integer
        memberCount:
          type: integer
        name:
          type: string
        isPrivate:
          type: boolean


    CreateRoomRequest:
      type: object
      required:
        - isPrivate
        - name
      properties:
        name:
          type: string
        isPrivate: 
          type: boolean
        password:
          type: string
          description: the password a user needs to provide when entering a private room

    JoinRoomRequest:
      type: object
      required:
        - name
      properties:
        password:
          type: string
        
paths:
  /register:
    post:
      summary: Register a new user
      security: [{}]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          headers:
            Location:
              schema:
                type: string
              description: Link to the newly created user
        '400':
          description: Bad request or user already exists

  /login:
    post:
      summary: Login
      security: [{}]

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserToken'
        '401':
          description: Unauthorized or login failed

  /users/{userId}:
    get:
      summary: Get user data
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User data retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
        '404':
          description: User does not exist

    put:
      summary: Update user data
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: User data updated successfully
        '401':
          description: Unauthorized
        '404':
          description: User does not exist

    delete:
      summary: Delete a user
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      security:
        - bearerAuth: [admin]
      responses:
        '200':
          description: User deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: User does not exist

  /rooms:
    get:
      summary: Retrieve general info about rooms
      security: [{}]

      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: The page number to retrieve (optional)
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 20
          description: The number of items per page (optional)
      responses:
        '200':
          description: Paginated rooms retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoomResponse'    
    post:
      summary: Create a new chat room
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoomRequest'
      responses:
        '201':
          description: Chat room created successfully
          headers:
            Location:
              schema:
                type: string
              description: Link to the newly created room
        '400':
          description: Room name already exists or failure in creation

  /rooms/{roomId}:
    get:
      summary: Information about a room
      security: [{}]
      parameters:
        - in: path
          name: roomId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Chat room info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomResponse'
        '404':
          description: Room not found

    post:
      summary: Join a chat room
      parameters:
        - in: path
          name: roomId
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JoinRoomRequest'
      responses:
        '101':
          description: Changing protocols
        '400':
          description: Room does not exist or incorrect password

security:
  - bearerAuth: []
