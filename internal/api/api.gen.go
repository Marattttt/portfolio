// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

const (
	GuestBearerScopes = "GuestBearer.Scopes"
)

// AuthRequest defines model for AuthRequest.
type AuthRequest struct {
	Id       int    `json:"id"`
	Password string `json:"password"`
}

// GuestRequest defines model for GuestRequest.
type GuestRequest struct {
	Name   string `json:"name"`
	Secret string `json:"secret"`
}

// GuestResponse defines model for GuestResponse.
type GuestResponse struct {
	Id   int    `json:"id"`
	Name string `json:"name"`
}

// GuestStats defines model for GuestStats.
type GuestStats struct {
	Date       time.Time `json:"date"`
	Drawings   int       `json:"drawings"`
	LinesDrawn int       `json:"linesDrawn"`
}

// GuestStatsResponse defines model for GuestStatsResponse.
type GuestStatsResponse struct {
	GuestId string       `json:"guestId"`
	Visits  []GuestStats `json:"visits"`
}

// StatsResponse defines model for StatsResponse.
type StatsResponse struct {
	Guests          []GuestResponse `json:"guests"`
	TotalGuests     int             `json:"totalGuests"`
	TotalLinesDrawn int             `json:"totalLinesDrawn"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Authorize and (if seccessful) get a JWT
	// (POST /authorize)
	PostAuthorize(c *gin.Context)
	// Create a new guest
	// (POST /guests)
	PostGuests(c *gin.Context)
	// Get guest data
	// (GET /guests/{guestId})
	GetGuestsGuestId(c *gin.Context, guestId int)
	// Edit the guest data
	// (PATCH /guests/{guestId})
	PatchGuestsGuestId(c *gin.Context, guestId int)
	// Get guest stats
	// (GET /guests/{guestId}/stats)
	GetGuestsGuestIdStats(c *gin.Context, guestId int)
	// Gets the app's general statistics
	// (GET /stats)
	GetStats(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostAuthorize operation middleware
func (siw *ServerInterfaceWrapper) PostAuthorize(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAuthorize(c)
}

// PostGuests operation middleware
func (siw *ServerInterfaceWrapper) PostGuests(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostGuests(c)
}

// GetGuestsGuestId operation middleware
func (siw *ServerInterfaceWrapper) GetGuestsGuestId(c *gin.Context) {

	var err error

	// ------------- Path parameter "guestId" -------------
	var guestId int

	err = runtime.BindStyledParameter("simple", false, "guestId", c.Param("guestId"), &guestId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter guestId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGuestsGuestId(c, guestId)
}

// PatchGuestsGuestId operation middleware
func (siw *ServerInterfaceWrapper) PatchGuestsGuestId(c *gin.Context) {

	var err error

	// ------------- Path parameter "guestId" -------------
	var guestId int

	err = runtime.BindStyledParameter("simple", false, "guestId", c.Param("guestId"), &guestId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter guestId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(GuestBearerScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchGuestsGuestId(c, guestId)
}

// GetGuestsGuestIdStats operation middleware
func (siw *ServerInterfaceWrapper) GetGuestsGuestIdStats(c *gin.Context) {

	var err error

	// ------------- Path parameter "guestId" -------------
	var guestId int

	err = runtime.BindStyledParameter("simple", false, "guestId", c.Param("guestId"), &guestId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter guestId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(GuestBearerScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGuestsGuestIdStats(c, guestId)
}

// GetStats operation middleware
func (siw *ServerInterfaceWrapper) GetStats(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetStats(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/authorize", wrapper.PostAuthorize)
	router.POST(options.BaseURL+"/guests", wrapper.PostGuests)
	router.GET(options.BaseURL+"/guests/:guestId", wrapper.GetGuestsGuestId)
	router.PATCH(options.BaseURL+"/guests/:guestId", wrapper.PatchGuestsGuestId)
	router.GET(options.BaseURL+"/guests/:guestId/stats", wrapper.GetGuestsGuestIdStats)
	router.GET(options.BaseURL+"/stats", wrapper.GetStats)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWUW/bNhD+KwQ3oBvg2U6XJz0t3QajxQYETYc+BHm4SCeZrUSqx1MML9B/H3i0ZDmS",
	"G2dBHjb0JXDE43d33/fxyHuduqp2Fi17ndxrn66xAvl50fD6PX5p0HP4tyZXI7FBWTRZ+MvbGnWijWUs",
	"kHQ70zV4v3E0XPVMxha6bWea8EtjCDOdXAeEQfjNrAt3t58w5YC1CqmPVmChwoksM+0xJeTHCxCAPvwr",
	"BfjaWY+nc3Cksqn+JfRo6iuGqMph3gxY8HNHFbBO5MNPbKSdER0ZwcbYwk/XWhqL/jeCjZ1af1CyJB4g",
	"Hmz/ehfHWSxCzNtsUso7401kwDBW8uN7wlwn+rvF3reLnWkXA9Lavhoggu2olS5rn2Oq/FMqf2J1Pdqo",
	"wJlmx1CuetCxWBLwx1MUG0KO98+6FsbNx3PUkOHtVag/dixIbxAIqR8WYddt/NSjrJlr3QYQY3MXQlNn",
	"GVI5lViBKcMm+Aze3VVAwLw8/6UI3+epq7pzkeg/w5p6EwPFzOhTMjUbZx8uv/LKI90hqYvLt4qdajyq",
	"3JHiNaoN3noj5mXDZYC+dMS5K43b7QpOQPIR+Gy+nC9DPlejhdroRP88X85fy8TitXCxgIbXjszf0Rku",
	"zqjgDwjlBUfrS+f5og+L0gQGXbbtSEEr+6CuS5OCcXbxyTu7H8WPuWo4pdtD+ZkalA/RclL16+VyOjNP",
	"pz50PLvPKAGHOrz7+EHJkvAdeEHLAROzoAKNx1I7NtxI3asmTdH7vClVx6FUGXQ5X549ow0kcjRu4z2C",
	"d7GHxvbqZgqkjn/XxF8DoHiqmqoC2upE98ZQYDP1g8mVx67jH1WBrEC9+/hBdi32s+a40/pz/gI2O7iL",
	"T/LZ2ZhgAVEpoTjD9/qW2wfU/CohCpTFjSp2OXsWFve76d3KFMYJOla4Y2PVz/lnHYMnzPWxB2LbGTBE",
	"654fY8Y6Vrlr7EOnrJAjCz1IDQQVMpLXyfW9NgEjTKb96CwGjQ+Fmg26Gl0eNzLf0vWEv8LnUyid6qup",
	"s73i+U7w/+whfoqEuytURDq4PK9vAtl7iX/PDMtNNdR5yvIL3z0KTzJ+fA29tPsPH0onHIFvwo/Ptu8e",
	"ri91uIOdHnXPixvmUa9IQP9yGygpT4n/yeW/Qvaxv7p+5VWBFglK8YDxbFIf8Np/AgAA//+83ApYng8A",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
