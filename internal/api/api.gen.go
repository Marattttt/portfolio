// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

const (
	GuestBearerScopes = "GuestBearer.Scopes"
)

// AuthRequest defines model for AuthRequest.
type AuthRequest struct {
	GuestName *string `json:"guestName,omitempty"`
	Password  *string `json:"password,omitempty"`
}

// GuestRequest defines model for GuestRequest.
type GuestRequest struct {
	Name   *string `json:"name,omitempty"`
	Secret *string `json:"secret,omitempty"`
}

// GuestResponse defines model for GuestResponse.
type GuestResponse struct {
	Id     *int    `json:"id,omitempty"`
	Name   *string `json:"name,omitempty"`
	Secret *string `json:"secret,omitempty"`
}

// GuestStats defines model for GuestStats.
type GuestStats struct {
	Date       *time.Time `json:"date,omitempty"`
	Drawings   *int       `json:"drawings,omitempty"`
	LinesDrawn *int       `json:"linesDrawn,omitempty"`
}

// GuestStatsResponse defines model for GuestStatsResponse.
type GuestStatsResponse struct {
	GuestId *string       `json:"guestId,omitempty"`
	Visits  *[]GuestStats `json:"visits,omitempty"`
}

// StatsResponse defines model for StatsResponse.
type StatsResponse struct {
	Guests          *[]GuestResponse `json:"guests,omitempty"`
	TotalGuests     *int             `json:"totalGuests,omitempty"`
	TotalLinesDrawn *int             `json:"totalLinesDrawn,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Authorize and (if seccessful) get a JWT
	// (POST /authorize)
	PostAuthorize(c *gin.Context)
	// Create a new guest
	// (POST /guests)
	PostGuests(c *gin.Context)
	// Get guest data
	// (GET /guests/{guestId})
	GetGuestsGuestId(c *gin.Context, guestId int)
	// Edit the guest data
	// (PATCH /guests/{guestId})
	PatchGuestsGuestId(c *gin.Context, guestId int)
	// Get guest stats
	// (GET /guests/{guestId}/stats)
	GetGuestsGuestIdStats(c *gin.Context, guestId int)
	// Gets the app's general statistics
	// (GET /stats)
	GetStats(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostAuthorize operation middleware
func (siw *ServerInterfaceWrapper) PostAuthorize(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAuthorize(c)
}

// PostGuests operation middleware
func (siw *ServerInterfaceWrapper) PostGuests(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostGuests(c)
}

// GetGuestsGuestId operation middleware
func (siw *ServerInterfaceWrapper) GetGuestsGuestId(c *gin.Context) {

	var err error

	// ------------- Path parameter "guestId" -------------
	var guestId int

	err = runtime.BindStyledParameter("simple", false, "guestId", c.Param("guestId"), &guestId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter guestId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGuestsGuestId(c, guestId)
}

// PatchGuestsGuestId operation middleware
func (siw *ServerInterfaceWrapper) PatchGuestsGuestId(c *gin.Context) {

	var err error

	// ------------- Path parameter "guestId" -------------
	var guestId int

	err = runtime.BindStyledParameter("simple", false, "guestId", c.Param("guestId"), &guestId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter guestId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(GuestBearerScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchGuestsGuestId(c, guestId)
}

// GetGuestsGuestIdStats operation middleware
func (siw *ServerInterfaceWrapper) GetGuestsGuestIdStats(c *gin.Context) {

	var err error

	// ------------- Path parameter "guestId" -------------
	var guestId int

	err = runtime.BindStyledParameter("simple", false, "guestId", c.Param("guestId"), &guestId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter guestId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(GuestBearerScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGuestsGuestIdStats(c, guestId)
}

// GetStats operation middleware
func (siw *ServerInterfaceWrapper) GetStats(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetStats(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/authorize", wrapper.PostAuthorize)
	router.POST(options.BaseURL+"/guests", wrapper.PostGuests)
	router.GET(options.BaseURL+"/guests/:guestId", wrapper.GetGuestsGuestId)
	router.PATCH(options.BaseURL+"/guests/:guestId", wrapper.PatchGuestsGuestId)
	router.GET(options.BaseURL+"/guests/:guestId/stats", wrapper.GetGuestsGuestIdStats)
	router.GET(options.BaseURL+"/stats", wrapper.GetStats)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWTY/bNhD9KwRbIC3g2t50Tz51ty2MBG2xyKbIIchhVhrJTCSSnRmt4S783wuSsiyv",
	"5K7ddA8tcpP4MW/mvcchH3Tmau8sWmG9eNCcrbCG+HnVyOoN/tEgS/j15DySGIyTZRj+DWoMP7LxqBea",
	"hYwt9XaiPTCvHeUjk9vJbsTdfcRMwvJlCHYUyh5DYcwI5TwM9s4yDkFMP1djBUuksO1fBL8VSBwfIucg",
	"EaFwVIPoRRz4TkyNejKEzQnWxpY8nm1lLPJPBGs7Nv/3mR3nJmr9Kh+l4d6wSVUZwTp+fE1Y6IX+arZ3",
	"1qy11axHxD4bIILNeHqnZHYmehdtkMBEixOoll3QIcFxwS9nspzc0pCRzW3IJOUeYa4RCKk7eGHXXRrq",
	"oqxEvN6GIMYWLizNnBXIovewBlOFTfAJ2N3XQCAyv/yhDOPTzNV6Z2H9a5hT12lhtBJyRsaLcfbx9AtW",
	"jHSPpK5uXilxqmFUhSMlK1RrvGMj0Z1GqhD6xpEUrjKu3aUn+h6JU+CL6Xw6D3jOowVv9EJ/P51PX+rQ",
	"JmQVuZhBIytH5s+ksUttICgNIb3gPX3jWK66ZRNNqV9cu3yzIwVt3AfeVyYD4+zsIzu7b2tP+aPf8SLj",
	"AcMQ5noh1GAcSOaJWb+cz8eRZRz60LviPmFccKjD63dvVZyKfAde0EqIiXlQgYZNYcRwA3VvmyxD5qKp",
	"1I7DmGXQ5XJ+8RllIJGjYRlvENilGhrbqZsriHn8syJ+7wVKp6qpa6CNXujOGApsrr4xhWLcVfytKlEU",
	"qNfv3sZds33XOO60tgk8i80OrruTfHYxJDgGURlhdAZ3+labR9T8GJcoUBbXqmwxOxZmD21338Z+iiN0",
	"LLFlY9neA595DM7o0EMPpLJzEEjWvTzGjHWiCtfYx05ZoiQWuiAeCGoUJNaL9w/ahBihM+1bZ9krvC/U",
	"pFfV4Br4EPtbthrxVxg+hdKxuhqf7xUvWsH/s4f4HAnbKzSKdHB5vv8QyN5L/HNuJN5UfZ3HLD/j3ZPs",
	"JOOnd8tzu//wyXPCEfgi/PBs8+6J+VyHO9jpSfc8u2Ge9Epc0L3cekrGp8T/5PJfonCqz/sXrEq0SFBF",
	"DxgWk3GIt/0rAAD//+FI+ZjqDgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
