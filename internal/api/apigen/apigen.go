// Package apigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package apigen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

const (
	GuestBearerScopes = "GuestBearer.Scopes"
)

// AuthRequest defines model for AuthRequest.
type AuthRequest struct {
	Id       int    `json:"id"`
	Password string `json:"password"`
}

// GuestRequest defines model for GuestRequest.
type GuestRequest struct {
	Name   string `json:"name"`
	Secret string `json:"secret"`
}

// GuestResponse defines model for GuestResponse.
type GuestResponse struct {
	Id   int    `json:"id"`
	Name string `json:"name"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Authorize and (if seccessful) get a JWT
	// (POST /authorize)
	PostAuthorize(w http.ResponseWriter, r *http.Request)
	// Create a new guest
	// (POST /guests)
	PostGuests(w http.ResponseWriter, r *http.Request)
	// Get guest data
	// (GET /guests/{guestId})
	GetGuestsGuestId(w http.ResponseWriter, r *http.Request, guestId int)
	// Edit the guest data
	// (PATCH /guests/{guestId})
	PatchGuestsGuestId(w http.ResponseWriter, r *http.Request, guestId int)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Authorize and (if seccessful) get a JWT
// (POST /authorize)
func (_ Unimplemented) PostAuthorize(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new guest
// (POST /guests)
func (_ Unimplemented) PostGuests(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get guest data
// (GET /guests/{guestId})
func (_ Unimplemented) GetGuestsGuestId(w http.ResponseWriter, r *http.Request, guestId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Edit the guest data
// (PATCH /guests/{guestId})
func (_ Unimplemented) PatchGuestsGuestId(w http.ResponseWriter, r *http.Request, guestId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostAuthorize operation middleware
func (siw *ServerInterfaceWrapper) PostAuthorize(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAuthorize(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostGuests operation middleware
func (siw *ServerInterfaceWrapper) PostGuests(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostGuests(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetGuestsGuestId operation middleware
func (siw *ServerInterfaceWrapper) GetGuestsGuestId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "guestId" -------------
	var guestId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "guestId", runtime.ParamLocationPath, chi.URLParam(r, "guestId"), &guestId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "guestId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGuestsGuestId(w, r, guestId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchGuestsGuestId operation middleware
func (siw *ServerInterfaceWrapper) PatchGuestsGuestId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "guestId" -------------
	var guestId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "guestId", runtime.ParamLocationPath, chi.URLParam(r, "guestId"), &guestId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "guestId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, GuestBearerScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchGuestsGuestId(w, r, guestId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/authorize", wrapper.PostAuthorize)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/guests", wrapper.PostGuests)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/guests/{guestId}", wrapper.GetGuestsGuestId)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/guests/{guestId}", wrapper.PatchGuestsGuestId)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RVX0/bMBD/KpY3aZtUtYXxlKfBNFUgTULAxAPiwSSXxNDY5nwBdVW++3R2mqZtYN3Q",
	"HvYCqX2+u9+fs5cytZWzBgx5mSylT0uoVPg8rqm8gMcaPPFPh9YBkoawqTP+SwsHMpHaEBSAshlJp7x/",
	"ttjf9YTaFLJpRhLhsdYImUxuOEMv/Ha0Crd395AS55px6Rc7MKqCgSoj6SFFoN83EBJ04a804J01Hvbn",
	"4IXOhvCH0N3SEUWNmhaXLEisF9o5AYWAnVR86i4udVlKIicbTqJNbjk0tYZUGjiBSuk5H1IPytunSqEi",
	"mh59KXh9nNpq1VUiv/OeOImBDCwDn6J2pK3Z3v7ghQd8AhTH56eCrKg9iNyioBLEM9x5TUw2aZpz6nOL",
	"lNu5tu0pOZJPgD4mPhhPx1OuZx0Y5bRM5OfxdHwY/EJl4GKiaiot6p9RFxsdwuoobu80C0U8HXdhkX1m",
	"0GaLFSlgwjnl3FynSlszuffcw2oQ+Os9Qi4T+W6ynpRJOyaT/ow0mwoT1hAWon1C14fT6XBlGi696Tey",
	"DxACNnU4u74SYSvwzbyAIc4JGavQM0bPiduG21H3sk5T8D6v52LFYeiSdTmaHrwBBiBa3IVxAcrbiKE2",
	"nbqZUKGPvwPxo5coTlVdVQoXMpGdMYQymfioc+FhhfiTKICEEmfXV+HUpGCB/etOm8WYf2KzjZtwL58d",
	"7BIckogUITjDd/rOF1vUfA0hQgkDz6Joa3YsTJbh/2nWcIkCBuiYQcvGLEbKN47BHtS0d/SAByLsTJGK",
	"1j16iRljSeS2NttOmQFFFrokTqGqgAC9TG6WUnMOvpnWV2fRA94XatRDtf1wNLfhfkvLAX/x8j6UDuGq",
	"XbZWPG8F/2+H+E8kbJ/QINLG43lzy2SvJf6WaQovVV/npml+BQAA//+zVRpBHgkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
