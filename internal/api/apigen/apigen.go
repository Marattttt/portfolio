// Package apigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package apigen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for Role.
const (
	Admin Role = "admin"
	User  Role = "user"
)

// CreateRoomRequest defines model for CreateRoomRequest.
type CreateRoomRequest struct {
	IsPrivate bool   `json:"isPrivate"`
	Name      string `json:"name"`

	// Password the password a user needs to provide when entering a private room
	Password *string `json:"password,omitempty"`
}

// JoinRoomRequest defines model for JoinRoomRequest.
type JoinRoomRequest struct {
	Password *string `json:"password,omitempty"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Name     string `json:"name"`
	Password string `json:"password"`
}

// RegisterRequest defines model for RegisterRequest.
type RegisterRequest struct {
	Name     string `json:"name"`
	Password string `json:"password"`
}

// Role defines model for Role.
type Role string

// RoomResponse defines model for RoomResponse.
type RoomResponse struct {
	Id          int    `json:"id"`
	IsPrivate   bool   `json:"isPrivate"`
	MemberCount int    `json:"memberCount"`
	Name        string `json:"name"`
}

// UserRequest defines model for UserRequest.
type UserRequest struct {
	Name       string              `json:"name"`
	ProfilePic *openapi_types.File `json:"profilePic,omitempty"`
}

// UserResponse defines model for UserResponse.
type UserResponse struct {
	Created time.Time `json:"created"`
	Id      int       `json:"id"`
	Name    string    `json:"name"`

	// ProfilePic base 64 encoded png image
	ProfilePic openapi_types.File `json:"profilePic"`
}

// UserToken defines model for UserToken.
type UserToken struct {
	Role   *Role   `json:"role,omitempty"`
	UserId *string `json:"userId,omitempty"`
}

// GetRoomsParams defines parameters for GetRooms.
type GetRoomsParams struct {
	// Page The page number to retrieve (optional)
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize The number of items per page (optional)
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// PostLoginJSONRequestBody defines body for PostLogin for application/json ContentType.
type PostLoginJSONRequestBody = LoginRequest

// PostRegisterJSONRequestBody defines body for PostRegister for application/json ContentType.
type PostRegisterJSONRequestBody = RegisterRequest

// PostRoomsJSONRequestBody defines body for PostRooms for application/json ContentType.
type PostRoomsJSONRequestBody = CreateRoomRequest

// PostRoomsRoomIdJSONRequestBody defines body for PostRoomsRoomId for application/json ContentType.
type PostRoomsRoomIdJSONRequestBody = JoinRoomRequest

// PutUsersUserIdJSONRequestBody defines body for PutUsersUserId for application/json ContentType.
type PutUsersUserIdJSONRequestBody = UserRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Login
	// (POST /login)
	PostLogin(w http.ResponseWriter, r *http.Request)
	// Register a new user
	// (POST /register)
	PostRegister(w http.ResponseWriter, r *http.Request)
	// Retrieve general info about rooms
	// (GET /rooms)
	GetRooms(w http.ResponseWriter, r *http.Request, params GetRoomsParams)
	// Create a new chat room
	// (POST /rooms)
	PostRooms(w http.ResponseWriter, r *http.Request)
	// Information about a room
	// (GET /rooms/{roomId})
	GetRoomsRoomId(w http.ResponseWriter, r *http.Request, roomId string)
	// Join a chat room
	// (POST /rooms/{roomId})
	PostRoomsRoomId(w http.ResponseWriter, r *http.Request, roomId string)
	// Delete a user
	// (DELETE /users/{userId})
	DeleteUsersUserId(w http.ResponseWriter, r *http.Request, userId string)
	// Get user data
	// (GET /users/{userId})
	GetUsersUserId(w http.ResponseWriter, r *http.Request, userId string)
	// Update user data
	// (PUT /users/{userId})
	PutUsersUserId(w http.ResponseWriter, r *http.Request, userId string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Login
// (POST /login)
func (_ Unimplemented) PostLogin(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Register a new user
// (POST /register)
func (_ Unimplemented) PostRegister(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve general info about rooms
// (GET /rooms)
func (_ Unimplemented) GetRooms(w http.ResponseWriter, r *http.Request, params GetRoomsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new chat room
// (POST /rooms)
func (_ Unimplemented) PostRooms(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Information about a room
// (GET /rooms/{roomId})
func (_ Unimplemented) GetRoomsRoomId(w http.ResponseWriter, r *http.Request, roomId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Join a chat room
// (POST /rooms/{roomId})
func (_ Unimplemented) PostRoomsRoomId(w http.ResponseWriter, r *http.Request, roomId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a user
// (DELETE /users/{userId})
func (_ Unimplemented) DeleteUsersUserId(w http.ResponseWriter, r *http.Request, userId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get user data
// (GET /users/{userId})
func (_ Unimplemented) GetUsersUserId(w http.ResponseWriter, r *http.Request, userId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update user data
// (PUT /users/{userId})
func (_ Unimplemented) PutUsersUserId(w http.ResponseWriter, r *http.Request, userId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostLogin operation middleware
func (siw *ServerInterfaceWrapper) PostLogin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostLogin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostRegister operation middleware
func (siw *ServerInterfaceWrapper) PostRegister(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostRegister(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRooms operation middleware
func (siw *ServerInterfaceWrapper) GetRooms(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRoomsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRooms(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostRooms operation middleware
func (siw *ServerInterfaceWrapper) PostRooms(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostRooms(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRoomsRoomId operation middleware
func (siw *ServerInterfaceWrapper) GetRoomsRoomId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "roomId" -------------
	var roomId string

	err = runtime.BindStyledParameterWithOptions("simple", "roomId", chi.URLParam(r, "roomId"), &roomId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "roomId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRoomsRoomId(w, r, roomId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostRoomsRoomId operation middleware
func (siw *ServerInterfaceWrapper) PostRoomsRoomId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "roomId" -------------
	var roomId string

	err = runtime.BindStyledParameterWithOptions("simple", "roomId", chi.URLParam(r, "roomId"), &roomId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "roomId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostRoomsRoomId(w, r, roomId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteUsersUserId operation middleware
func (siw *ServerInterfaceWrapper) DeleteUsersUserId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{"admin"})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUsersUserId(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUsersUserId operation middleware
func (siw *ServerInterfaceWrapper) GetUsersUserId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsersUserId(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutUsersUserId operation middleware
func (siw *ServerInterfaceWrapper) PutUsersUserId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutUsersUserId(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/login", wrapper.PostLogin)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/register", wrapper.PostRegister)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/rooms", wrapper.GetRooms)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/rooms", wrapper.PostRooms)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/rooms/{roomId}", wrapper.GetRoomsRoomId)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/rooms/{roomId}", wrapper.PostRoomsRoomId)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/users/{userId}", wrapper.DeleteUsersUserId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{userId}", wrapper.GetUsersUserId)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/users/{userId}", wrapper.PutUsersUserId)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xYQVPjOBP9Kyp932G3ykvCLLuH3Bi2doopDikGag8UB8XuOJqx1UaSYTKU//tWt2wc",
	"O3GcYYDZEySW3K33+r1u5VHGmBdowHgnZ4/SxSvIFf97ZkF5uETML+GuBOfpy8JiAdZr4CXaza2+Vx7o",
	"g18XIGdygZiBMrKKpFH55hPnrTYpPSiUcw9oE3qYgIutLrxGI2fSr0A0T4USpQMrDEDihEdRWLzXCYiH",
	"FRgBxgO9TyhRhCSERcxl1A9XRdLCXaktJHJ2s5FzneDt0w5cfIbYU4IfUZu9J988wf54gzEuMNVmMMBB",
	"2B0QeWPDriQuIdXOg/3peWDGYcCUOe1RSa6NjCQVwMaGNnxgxxVoHOwozM20tPGQgqVdIwWbQ74Ae4al",
	"8bv3D6DRL7FEdt8VNRi08XeBcO2eRYTFpc5grmN6vESbK0/H0kbZ9agcBsszJDMEcMzmkHQiJsrDb17z",
	"QbeyHGLkwGN1XWKhHIg/TwSYGBNIRGFSoXOVUuTvBYDJqulpTtWJPgTOFX4Bs42MrSv5/xaWcib/N2kN",
	"dlK764SrvQrVfT6goF7MKpIO4tJqv/5EbwnBFqAs2NPSr9pPfzcAfPznSkbB0bnO+WmLx8r7Qlb0Ym2W",
	"uA3y6fxcLNEGD7bsE1bRs0io0q/AeB03n00i4pXy7MAiV0alkIPxRxRNewKEIeOFZ7SQ5CtO5+cykvdg",
	"XYh4fDQ9mhIuWIBRhZYz+Tt/RebhV3ziSUa2ybBjkAmBz3kQknKOzrOzykAzOP8ekzXXLBoPQdmqKLI6",
	"+8lnh6ZtfWPUdVy76haTtyXwF0E1nO+76fTFYrdVx4G7dHFiwpVxDM4ty4xwPJkeb/N6bYg+tPobJAKt",
	"YEDFUukMkk6dydnNY3UbSVfmOSmpjsFrJrZuHPuZaNrLK5HR714H8bELkrbEwUKygWJGBrIClYDl7RcY",
	"Et1+x4U2X2hIoQnGwEO2FrWbsIAaIapdYq+Yqun2O9+rRNS4iUaJKrOgkrWAr9p5N0JYA5BQlFPIJNCH",
	"mPOBUthB3Qfwl7yAhGdVDp6Pf9PP74qntRSEKanZ0fEteKvhHsQvyKtU9iv1PVp9VwL7cbB8WQS/bmFJ",
	"YKnKzMvZcSRzbXROo8BxtNU0qmhXHnUKuBTaQ+5EATbkdlAin/S3gWTeTSOZq68hmz+mI6nd/qD8Offx",
	"9rEx+7StQlmr1rusYa5SbbgUmfYnjnqFPlZKNbEpGLAqE9Q1hFpgGWzfcdMedoK6nl7DBrZvKs81grOn",
	"JtaI92WtoL6hPMMKuGFSwfYMgHyBvLu0ILQJgWhHn8zOqHBz2+U2AFibxFMj33CKySP9OU+qUcu45HXb",
	"xsHCoy7e6s42S7tE7YPn9hW7a1dV2ypqa4PnJSbqZIgo9GKJpRlrqOcmjKsaTS0lVUM/qqU3APrlldq/",
	"Vx+g0+MBnZqULv+FRY8xZk7uFU6C4JgUFg1pRpsYrYXYP/3c8H2SoZMI1RcLNVg3eQxzfRWSySBcN7s8",
	"/sXf0+DhrsMt4BAmy2bpD0tmxwAUUu03hQOmyEEthNd2sB9Bub7498AOYNW/B1G0IQv6eXi+2IC/z4IC",
	"nsqrwRb+tmz1aPoAPsyolCJbWLnLwco3o+nlDWzzJ5rDb39DLJZFovx/i8NrTmmTxtHt1b8BAAD//6Wv",
	"2h9FFgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
