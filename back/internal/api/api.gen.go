// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

const (
	GuestBearerScopes = "GuestBearer.Scopes"
)

// AuthRequest defines model for AuthRequest.
type AuthRequest struct {
	GuestName *string `json:"guestName,omitempty"`
	Password  *string `json:"password,omitempty"`
}

// GuestRequest defines model for GuestRequest.
type GuestRequest struct {
	Name   *string `json:"name,omitempty"`
	Secret *string `json:"secret,omitempty"`
}

// GuestResponse defines model for GuestResponse.
type GuestResponse struct {
	Name   *string `json:"name,omitempty"`
	Secret *string `json:"secret,omitempty"`
}

// StatsResponse defines model for StatsResponse.
type StatsResponse struct {
	GuestId *string `json:"guestId,omitempty"`
	Visits  *[]struct {
		Date       *time.Time `json:"date,omitempty"`
		Drawings   *int       `json:"drawings,omitempty"`
		LinesDrawn *int       `json:"linesDrawn,omitempty"`
	} `json:"visits,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Authorize and (if seccessful) get a JWT
	// (POST /authorize)
	PostAuthorize(c *gin.Context)
	// Create a new guest
	// (POST /guests)
	PostGuests(c *gin.Context)
	// Get guest data
	// (GET /guests/{guestId})
	GetGuestsGuestId(c *gin.Context, guestId int)
	// Get a guests information; Id is taken from JWT
	// (GET /stats)
	GetStats(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostAuthorize operation middleware
func (siw *ServerInterfaceWrapper) PostAuthorize(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAuthorize(c)
}

// PostGuests operation middleware
func (siw *ServerInterfaceWrapper) PostGuests(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostGuests(c)
}

// GetGuestsGuestId operation middleware
func (siw *ServerInterfaceWrapper) GetGuestsGuestId(c *gin.Context) {

	var err error

	// ------------- Path parameter "guestId" -------------
	var guestId int

	err = runtime.BindStyledParameter("simple", false, "guestId", c.Param("guestId"), &guestId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter guestId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGuestsGuestId(c, guestId)
}

// GetStats operation middleware
func (siw *ServerInterfaceWrapper) GetStats(c *gin.Context) {

	c.Set(GuestBearerScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetStats(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/authorize", wrapper.PostAuthorize)
	router.POST(options.BaseURL+"/guests", wrapper.PostGuests)
	router.GET(options.BaseURL+"/guests/:guestId", wrapper.GetGuestsGuestId)
	router.GET(options.BaseURL+"/stats", wrapper.GetStats)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWTY/bRgz9K4NpgbaAa3vTvVS9dLcFjA3QYpFNkUORA1ei5EmkGZWkbLiG/3vBGVn+",
	"koO0wR56s4Yccvj4+OitzUPTBo9e2GZby/kSG4g/7zpZvsG/OmTRz5ZCiyQOo7HS49+hQf2QTYs2syzk",
	"fGV3E9sC8zpQMWLcTfYn4fkD5qLuCw12NZW/loUxJ5R/l4Pb4BlfKsmTgPD1JBG0h2I0z8qxSy1wgg1f",
	"Xi5AYsgyUANis3jwvbgG7eQyXEGwdr7io1zOC1ZIaq2dR/6VYO3H7GOV9QdABJsxj4RUR042T0qh9OYI",
	"+j0CIQ3k0lvP6WiIshRp7U6DOF8Gdc2DF8gj7tiAq/USfAQOqwYIROa3P1d6Ps1DYyd9++xvajP3yTHC",
	"gJyTa8UFf27+hg0jrZDM3eODkWA6RlMGMrJEs8ZndhKRdVJr6MdAUobahf6WndgVEqfAN9P5dK75Qose",
	"Wmcz+8N0Pn1ldRRkGbGYQSfLQO7vRIyQqK4dBn2e0sI+Bpa7wW1iKc3EfSg2e1DQx3vQtrXLwQU/+8DB",
	"H0ZXf31NWNrMfjU7zPasH+zZ8VRHxDWHIyxsJtRhPEj8ja9+NZ+PZ5bx1KeclfARo8NpH16/e2uiKeKt",
	"uKAXjYmFdoEuCT1CuIvuPnV5jsxlV5s9hvGV2pfb+c0XlIFEgS7LeIPAIdXQ+aG7hYH4jv9WxB9HgdJU",
	"dU0DtLGZHYhhwBfmW1caxn3F35kKxYB5/e5tvDWLUsOfZtoi+bwIzU4k/bN4dnMJcAxicsLIDB76W2/O",
	"oPkluhgwHtem6nMOKMy2vfDuogjjCBwL7NFY9BL9hWPwGdD0S2KEA6nsAgQidX+8vYaMD2LK0PlzpixQ",
	"EgpDkBYIGhQkttmfW+s0hirTQTqro8KPGzU5qupiUbxXkFmX3qeQjVvxJRE9XbsDogdlUPug7UeTGsXm",
	"/y0P/dKNbT1Zt76r6937c1pAIgYbXbT6R8IF/5N5KIxjIxAlmULT68hu908AAAD//4BYMZofCgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
