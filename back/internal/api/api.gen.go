// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

const (
	GuestBeareScopes = "GuestBeare.Scopes"
)

// AuthRequest defines model for AuthRequest.
type AuthRequest struct {
	GuestName *string `json:"guestName,omitempty"`
	Password  *string `json:"password,omitempty"`
}

// GuestRequest defines model for GuestRequest.
type GuestRequest struct {
	Name   *string `json:"name,omitempty"`
	Secret *string `json:"secret,omitempty"`
}

// GuestResponse defines model for GuestResponse.
type GuestResponse struct {
	Name   *string `json:"name,omitempty"`
	Secret *string `json:"secret,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Authorize and (if seccessful) get a JWT
	// (POST /authorize)
	PostAuthorize(c *gin.Context)
	// Create a new guest
	// (POST /guests)
	PostGuests(c *gin.Context)
	// Get guest data
	// (GET /guests/{guestId})
	GetGuestsGuestId(c *gin.Context, guestId int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostAuthorize operation middleware
func (siw *ServerInterfaceWrapper) PostAuthorize(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAuthorize(c)
}

// PostGuests operation middleware
func (siw *ServerInterfaceWrapper) PostGuests(c *gin.Context) {

	c.Set(GuestBeareScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostGuests(c)
}

// GetGuestsGuestId operation middleware
func (siw *ServerInterfaceWrapper) GetGuestsGuestId(c *gin.Context) {

	var err error

	// ------------- Path parameter "guestId" -------------
	var guestId int

	err = runtime.BindStyledParameter("simple", false, "guestId", c.Param("guestId"), &guestId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter guestId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(GuestBeareScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGuestsGuestId(c, guestId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/authorize", wrapper.PostAuthorize)
	router.POST(options.BaseURL+"/guests", wrapper.PostGuests)
	router.GET(options.BaseURL+"/guests/:guestId", wrapper.GetGuestsGuestId)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RUwU7cSBD9lVbtSrsrWWPDcolPgRxGICVCQMQBcWjssqdh3O1Ul0GTkf89qm6P8cCA",
	"SBAn213V71W9eq41FK5pnUXLHvI1+GKBjQ6vhx0vzvBHh57lsyXXIrHBEKzl+JtuUD541SLk4JmMraFP",
	"oNXePzgqdwT7ZHPibm6xYEmfC9iLVPYlFo8FIf8eh2+d9fgxJDG7I8Orc5ExIgfiI9SENAost27i0Yiy",
	"YG6hFxBjKyephbOsi8CNjTZLuaTvtHf3jSbNnB18ruV8VrgGkqEF+CoxdRQTpYMSfUGmZePs0/A/Xnmk",
	"eyR1eHqs2KnOo6ocKV6gesAbbxilQsNLgT51xJVbGjfcggTukXwE3ptls0z4XItWtwZy+H+WzfZB7MCL",
	"oEWqO144Mj/jBFwct8xBS3nHZSDxfDimJUDRF0euXG1EQRvu6bZdmkIbZ9NbLzVs7CtvfxNWkMNf6aO/",
	"08Hc6dTZQXHhMIQl5EwdhoNolFD1fpbtZubd1NvOYneHIWF7DieXFyqEgt6iC1oWTCxlChNjvGK4Z9M9",
	"74oCva+6pdpoGKqUuRxke+9oA4kcPW/jDLV3sYfOjtMtlQ51/FkT3ydAW38V5FfXCfiuaTStIIfRJkrb",
	"Uv1rKuVx0/9/qkZWWp1cXgSMNGws/7rv5jHnQ0y3teTe5Lq953IHEFUQBp/4cdrLVRRqlOZLSFFaWXxQ",
	"9cA5qpCuw/O47MMuxx1yzHFQYx4z4Z0/xRukGXbzDkfEtkvNOhj508FLyljHqnKdLZ/IMUeOKowgrSbd",
	"ICN5yK/WYARD9tTjIq0njU8HlUy6GrxsLGONBH1//cSv0/0v9u2v+18BAAD//+G9Cs5zBwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
